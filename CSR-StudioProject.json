{"projectName":"CSR - WB","settings":{"projectType":"json","projectDescription":"","currencySettings":[{"currencyCode":"USD","baseFormatFlag":"Yes","largeThousands":"1,234","largeMillions":"1,234,567","largeBillions":"1,234,567,891","negativeOptions":"minus","currencySymbol":"0"}],"corsAllowableDomains":[],"preferences":{"editorViewPreference":"MARKUP_MODE"}},"sampleOutput":"Subject 100001Â (11112)This 57-year-old (at time of enrollment) white female was random...","activeApiKey":false,"data":[{"id":"Primary","type":"json","jsonData":{"reportType":"SHORT","reportTime":"10-01-2018 16:25","subjectId":"100001","studyId":"STY-123","siteId":"11111","investigatorId":"11112","demographics":{"age":57,"ageUnit":"YEAR","birthDate":"01-01-1960","race":"WHITE","gender":"FEMALE","ethnicity":"non-hispanic","country":"United States","enrollmentDate":"01-01-2017","actualArmCode":"A","actualArmDescription":"Prozium 505"},"smokerDrinker":{"smoker":"BEFORE","drinker":"ONGOING"},"medicalHistory":{"medicalHistory":[{"medicalTerm":"cough","eventStartDate":"10-01-2016","eventEndDate":"29-08-2016","eventRelativeTime":"BEFORE","isSurgical":true,"isDisease":false},{"medicalTerm":"fatigue","eventStartDate":"10-01-2016","eventEndDate":[],"eventRelativeTime":"ONGOING","isSurgical":false,"isDisease":false},{"medicalTerm":"lurgy","eventStartDate":"10-01-2016","eventEndDate":[],"eventRelativeTime":"ONGOING","isSurgical":true,"isDisease":false}],"diseaseHistory":[]},"adverseEvents":{"adverseEvents":[{"medicalTerm":"HEADACHE","isSerious":false,"studyDayStart":1,"studyDayEnd":[],"eventStartDate":"01-01-2017","eventEndDate":"07-01-2017","resultsInDeath":false,"requiresHospitalisation":false,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Migraine pain","outcome":[],"investigatorCausality":[]},{"medicalTerm":"NAUSEA","isSerious":false,"studyDayStart":22,"studyDayEnd":[],"eventStartDate":"22-01-2017","eventEndDate":"25-01-2017","resultsInDeath":false,"requiresHospitalisation":false,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Nausea and vomiting symptoms","outcome":[],"investigatorCausality":[]},{"medicalTerm":"VOMITING","isSerious":true,"studyDayStart":10,"studyDayEnd":[],"eventStartDate":"10-01-2017","eventEndDate":"15-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Mucosal findings abnormal","outcome":[],"investigatorCausality":[]},{"medicalTerm":"Blurred Vision","isSerious":false,"studyDayStart":26,"studyDayEnd":[],"eventStartDate":"26-01-2017","eventEndDate":"30-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":[],"outcome":[],"investigatorCausality":"REASONABLE_POSSIBILITY"},{"medicalTerm":"DIARRHEA","isSerious":true,"studyDayStart":26,"studyDayEnd":[],"eventStartDate":"26-01-2017","eventEndDate":"30-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Loose bowel movements","outcome":[],"investigatorCausality":"REASONABLE_POSSIBILITY"}],"seriousEvents":[{"medicalTerm":"VOMITING","isSerious":true,"studyDayStart":10,"studyDayEnd":[],"eventStartDate":"10-01-2017","eventEndDate":"15-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Mucosal findings abnormal","outcome":[],"investigatorCausality":[]},{"medicalTerm":"DIARRHEA","isSerious":true,"studyDayStart":26,"studyDayEnd":[],"eventStartDate":"26-01-2017","eventEndDate":"30-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Loose bowel movements","outcome":[],"investigatorCausality":"REASONABLE_POSSIBILITY"}],"nonSeriousEvents":[{"medicalTerm":"HEADACHE","isSerious":false,"studyDayStart":1,"studyDayEnd":[],"eventStartDate":"01-01-2017","eventEndDate":"07-01-2017","resultsInDeath":false,"requiresHospitalisation":false,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Migraine pain","outcome":[],"investigatorCausality":[]},{"medicalTerm":"NAUSEA","isSerious":false,"studyDayStart":22,"studyDayEnd":[],"eventStartDate":"22-01-2017","eventEndDate":"25-01-2017","resultsInDeath":false,"requiresHospitalisation":false,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Nausea and vomiting symptoms","outcome":[],"investigatorCausality":[]},{"medicalTerm":"Blurred Vision","isSerious":false,"studyDayStart":26,"studyDayEnd":[],"eventStartDate":"26-01-2017","eventEndDate":"30-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":[],"outcome":[],"investigatorCausality":"REASONABLE_POSSIBILITY"}],"seriousEventsGroupedByStudyDay":{"10":[{"medicalTerm":"VOMITING","isSerious":true,"studyDayStart":10,"studyDayEnd":[],"eventStartDate":"10-01-2017","eventEndDate":"15-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Mucosal findings abnormal","outcome":[],"investigatorCausality":[]}],"26":[{"medicalTerm":"DIARRHEA","isSerious":true,"studyDayStart":26,"studyDayEnd":[],"eventStartDate":"26-01-2017","eventEndDate":"30-01-2017","resultsInDeath":false,"requiresHospitalisation":true,"toxicityGrade":1,"resultsInDiscontinuationOfStudy":false,"highLevelTerm":"Loose bowel movements","outcome":[],"investigatorCausality":"REASONABLE_POSSIBILITY"}]}},"concomitantMedications":{"medications":[{"medicationName":"IMMODIUM","startDate":"26-01-2017","endDate":"30-01-2017","studyDayStart":26,"studyDayEnd":[],"route":"ORAL","indication":"Diarrhea Prevention","isTherapy":false},{"medicationName":"PARACETAMOL","startDate":"01-01-2017","endDate":"30-01-2017","studyDayStart":1,"studyDayEnd":[],"route":"ORAL","indication":"Premedication","isTherapy":false}],"medicationsWithIndication":[{"medicationName":"IMMODIUM","startDate":"26-01-2017","endDate":"30-01-2017","studyDayStart":26,"studyDayEnd":[],"route":"ORAL","indication":"Diarrhea Prevention","isTherapy":false},{"medicationName":"PARACETAMOL","startDate":"01-01-2017","endDate":"30-01-2017","studyDayStart":1,"studyDayEnd":[],"route":"ORAL","indication":"Premedication","isTherapy":false}],"medicationsWithoutIndication":[],"therapyHistory":[{"medicationName":"IBUPROFEN","startDate":"01-01-2017","endDate":"10-01-2017","studyDayStart":1,"studyDayEnd":[],"route":"ORAL","indication":"Headache Relief","isTherapy":true}]},"laboratoryValues":{"laboratoryValues":[]}}}],"templates":[{"id":"Main","value":"<h4><strong>Subject [[TrialSubjectID</strong><strong>]]&nbsp;</strong><strong>([[TrialInvestigatorID</strong><strong>]]</strong><strong>)</strong></h4><p>This [[Age]]-[[AgeUnit]]-old (at time of enrollment) [[Race]] [[Gender]] was randomized (or enrolled) in treatment group [[ArmCode]] [[LEX_SmokerDrinker]], with a relevant history of [[MedicalHistory]], who was treated with [[ConMedTHmedicine]], [[if (len(SeriousAdverseEvents)==0){without any reported adverse events} else {experienced [[inflectNoun('event',len(SeriousAdverseEvents))]] of [[SeriousAdverseEvents]]}]].</p><p>[[forAll(SeriousAdverseEventDays,d-&gt;seriousAE(d))]]</p>","postProcessors":[{"postProcessorId":"PP01","enabled":true}]},{"id":"CourseOfEvents","value":"<p>#define CourseOfEvents(day, COETitle, MedicalTerms, IsHospitalized, ConMedMedicine, ConMedIndication, AEsConcurrentTo, AEsPriorTo)</p><p><u><strong>Clinical course of events&nbsp;</strong></u><strong><u>: [[COETitle]]</u></strong></p><p>On Day [[asNumber(day)]] the subject experienced [[if(len(MedicalTerms)==1) {an}]] [[inflectNoun('event',len(MedicalTerms))]] of [[MedicalTerms]][[if(len(IsHospitalized)&gt;=1){, which required hospitalization}]]. [[OtherEvents(day, len(MedicalTerms), AEsConcurrentTo, AEsPriorTo)]] [[if (len(ConMedMedicine)==0) {No concomitant medications were reported.} else {[[realise((pairwiseMap(ConMedMedicine,ConMedIndication, (x,y) -&gt; (medicine = x, indication = y)), 'TreatmentMessage'))]]}]]</p><p>[[forAll(filter(WholeJSON['adverseEvents']['seriousEvents'], x-&gt;x.studyDayStart== asNumber(day)), d-&gt;InvCausality(d))]]</p>"},{"id":"OtherEvents","value":"<p>#define OtherEvents(day, MedicalTermsLength, AEsConcurrentTo, AEsPriorTo)</p><p>[[if (len(AEsConcurrentTo)==0 &amp;&amp; len(AEsPriorTo)&gt;0)</p><p>{Prior to [[MedicalTermsLength ==1?'this':'these']] [[inflectNoun('event',MedicalTermsLength)]], the subject also experienced [[ConditionalA(AEsPriorTo)]] [[inflectNoun('event',len(AEsPriorTo))]] of [[AEsPriorTo]]}</p><p>elseif (len(AEsConcurrentTo)&gt;0 &amp;&amp; len(AEsPriorTo)&gt;0)<br><br>{Concurrent to [[MedicalTermsLength==1?'this':'these']] [[inflectNoun('event',MedicalTermsLength)]], the subject also experienced [[ConditionalA(AEsConcurrentTo)]] [[inflectNoun('event',len(AEsConcurrentTo))]] of [[AEsConcurrentTo]], and experienced [[ConditionalA(AEsPriorTo)]] prior [[inflectNoun('event',len(AEsPriorTo))]] of [[AEsPriorTo]]}</p><p>elseif (len(AEsConcurrentTo)&gt;0)<br><br>{Concurrent to [[MedicalTermsLength==1?'this':'these']] [[inflectNoun('event',MedicalTermsLength)]], the subject also experienced [[ConditionalA(AEsConcurrentTo)]] [[inflectNoun('event',len(AEsConcurrentTo))]] of [[AEsConcurrentTo]]}]].</p>"},{"id":"InvCausality","value":"<p>#define InvCausality(Array)</p><p>[[if (len(Array.investigatorCausality)&gt;0) {The investigator considered the event of [[lower(Array.medicalTerm)]] as having [[substitute(lower(Array.investigatorCausality), '_', ' ')]] of being related to the study drug.} ]]</p>"},{"id":"seriousAE","value":"<p>#define seriousAE(day)</p><p>[[EarlierDays = sortNumbers(filter(SeriousAdverseEventDays, x -&gt; x &lt; day))</p><p>PrevDay = reduce(EarlierDays, 0, (a,b) -&gt; b)</p><p>SeriousEventsArray = filter(WholeJSON['adverseEvents']['seriousEvents'],x-&gt;x.studyDayStart== asNumber(day))</p><p>AdverseEventsArray = filter(WholeJSON['adverseEvents']['adverseEvents'],x-&gt;x.studyDayStart== asNumber(day))</p><p>MedicalTerms = map(SeriousEventsArray,x-&gt;lower(x.medicalTerm))</p><p>IsHospitalized= map(filter(SeriousEventsArray,x-&gt;x.requiresHospitalisation==true),x-&gt;x.requiresHospitalisation)</p><p>ConMedArray = filter(WholeJSON['concomitantMedications']['medicationsWithIndication'],x-&gt;x.studyDayStart== asNumber(day))</p><p>ConMedMedicine = map(ConMedArray,x-&gt;lower(x.medicationName))</p><p>ConMedIndication = map(ConMedArray,x-&gt;lower(x.indication))</p><p>AEsConcurrentTo = map(filter(AdverseEventsArray,x-&gt;x.isSerious==false),x-&gt;lower(x.medicalTerm))</p><p>AEsPriorTo = map(filter(WholeJSON['adverseEvents']['adverseEvents'], x-&gt; x.studyDayStart&gt;=PrevDay &amp;&amp; x.studyDayStart&lt;asNumber(day) &amp;&amp; x.isSerious==false), x-&gt;lower(x.medicalTerm))</p><p>CourseOfEvents(day, len(EarlierDays) + 1, MedicalTerms, IsHospitalized, ConMedMedicine, ConMedIndication, AEsConcurrentTo, AEsPriorTo)]]</p>"},{"id":"README","value":"<h1>Main Script</h1><p>This is the main script. &nbsp;It reads in the demographics variables (<strong>Age</strong>,<strong>&nbsp;AgeUnit</strong>, <strong>Race</strong>, <strong>Gender</strong> and <strong>ArmCode</strong>). &nbsp;It then calls the <strong>SmokerDrinkerLEX rule&nbsp;</strong>to generate the appropriate Smoker/Drinker Narrative. &nbsp;From there we go on to list out the <strong>MedicalHistory</strong> and the<strong>&nbsp;ConMedTHmedicine.</strong>&nbsp; All of the variables listed above are accessible from the variables pull down.</p><pre>This [[Age]]-[[AgeUnit]]-old (at time of enrollment) [[Race]] [[Gender]] was randomized (or enrolled) in treatment group [[ArmCode]] [[LEX_SmokerDrinker]] with a relevant history of [[MedicalHistory]], who was treated with[[ConMedTHmedicine]], [[if (len(SeriousAdverseEvents)==0){without any reported adverse events} else {experienced [[inflectNoun('event',len(SeriousAdverseEvents))]] of [[SeriousAdverseEvents]]}]].</pre><p>Once the opening paragraph is complete it's time to report on all serious adverse events. &nbsp;The next line of code passes the day a serious adverse event happened to the \"seriousAE Script. &nbsp;The \"seriousAE Script\" calculates variables(specific to a day) and passed them to the &nbsp;\"CourseOfEvents narrative script\" which reports on each serious AE. &nbsp;</p><pre>[[forAll(SeriousAdverseEventDays,d-&gt;seriousAE(d))]]</pre><h1>CourseOfEvents Script</h1><p>The \"CourseOfEvents Script\" &nbsp;reports all Serious Adverse events which occured on the day which is passed in. &nbsp;This script calls out to the \"COEheader Script\" to set to calculate the COETitle variable. &nbsp;The \"CourseOfEvents Script\" passes the variables(<strong>MedicalTerms, IsHospitalized, ConMedMedicine, ConMedIndication, AEsConcurrentTo, AEsPriorTo</strong>) needed to narrate the Serious Events which occurred on a given day. &nbsp;Within this script we call the \"OpenEvents Script\" and pass variables which are used to determine adverse events which happened on the same day or prior to the serious adverse event. &nbsp;Within this script we also report on concomitant medications and call out to a scipt which processes investigator causality.</p><pre>[[COEheader(day)]]<br><br><u><strong>Clinical course of events&nbsp;</strong></u><strong><u>: [[COETitle]]</u></strong><br>On Day [[asNumber(day)]] the subject experienced [[len(MedicalTerms)==1 ?'an':'']] [[inflectNoun('event',len(MedicalTerms))]] of [[MedicalTerms]][[len(IsHospitalized)&gt;=1?', which required hospitalization.':'.']] [[OtherEvents(day, MedicalTerms, AEsConcurrentTo, AEsPriorTo)]] [[if (len(ConMedMedicine)==0) {No concomitant medications were reported.} else {[[pairwiseMap(ConMedMedicine,ConMedIndication,(x,y)-&gt;\"The subject was treated with [[x]] for [[y]]\")]]. }]]<br>[[forAll(filter(WholeJSON['adverseEvents']['seriousEvents'],x-&gt;x.studyDayStart== asNumber(day)),d-&gt;InvCausality(d))]]</pre><p><br></p><h1>OtherEvents Script</h1><p>The 'OtherEvents Script\" determines if non serious adverse events occurred concurrent to, or prior to, the day the Serious Adverse event occured. &nbsp;We pass in the following variables for the the narrator to use within this script. <strong>(</strong><strong>MedicalTerms, AEsComcurrentTo and AEsPriorTo)</strong></p><pre>[[if (len(AEsConcurrentTo)==0 &amp;&amp; len(AEsPriorTo)&gt;0)<br>{Prior to [[len(MedicalTerms)==1?'this':'these']] [[inflectNoun('event',len(MedicalTerms))]], the subject also experienced [[len(AEsPriorTo)==1?'an':'']] [[inflectNoun('event',len(AEsPriorTo))]] of [[AEsPriorTo]]}<br>elseif (len(AEsConcurrentTo)&gt;0 &amp;&amp; len(AEsPriorTo)&gt;0)<br><br>{Concurrent to [[len(MedicalTerms)==1?'this':'these']] [[inflectNoun('event',len(MedicalTerms))]], the subject also experienced [[len(AEsConcurrentTo)==1?'an':'']] [[inflectNoun('event',len(AEsConcurrentTo))]] of [[AEsConcurrentTo]], and experienced a prior [[inflectNoun('event',len(AEsPriorTo))]] of [[AEsPriorTo]]}<br>elseif (len(AEsConcurrentTo)&gt;0)<br><br>{Concurrent to [[len(MedicalTerms)==1?'this':'these']] [[inflectNoun('event',len(MedicalTerms))]], the subject also experienced [[len(AEsConcurrentTo)==1?'an':'']] [[inflectNoun('event',len(AEsConcurrentTo))]] of [[AEsConcurrentTo]]}]].</pre><p><br></p><h1>InvCausality Script</h1><p>The \"Investigator Causality Script\" reports Serious Events for which the investigator determined causality (reasonable possibility of being related to study drug, no reasonable possibility, etc.)</p><pre>[[if (len(Array.investigatorCausality)&gt;0) {The investigator considered the event of [[lower(Array.medicalTerm)]] as having [[substitute(lower(Array.investigatorCausality), '_', ' ')]] of being related to the study drug.} ]]</pre><p>\"</p><p><br></p>"},{"id":"ConditionalA","value":"<p>#define ConditionalA(List)</p><p>[[if(len(List) == 1) {a}]]</p>"}],"lexRuleFiles":[{"id":"SmokerDrinkerLexRule.xml","value":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<EnglishLexRuleSet xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"../../META-INF/englishLexRuleSchema.xsd\">\n    \n    <Selector id=\"SmokerDrinkerSelector\" classes=\"SmokerDrinkerMessage\" >\n  \t\t<Function>.smokerDrinker</Function>\n    </Selector>\n    \n    <C id=\"SmokerDrinkerRule1\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('ONGOING') &amp;&amp; msg.drinker.equals('ONGOING')}}\" >\n  \t\t<Text string=\"who is a current tobacco and alcohol user\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule2\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('BEFORE') &amp;&amp; msg.drinker.equals('BEFORE')}}\" >\n  \t\t<Text string=\"with a history of prior tobacco and alcohol use\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule3\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('ONGOING') &amp;&amp; msg.drinker.equals('BEFORE')}}\" >\n  \t\t<Text string=\"who currently uses tobacco and has a history of alcohol use\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule4\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('BEFORE') &amp;&amp; msg.drinker.equals('ONGOING')}}\" >\n  \t\t<Text string=\"with a history of prior tobacco use and currently uses alcohol\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule5\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('ONGOING') &amp;&amp; msg.drinker.equals('NA')}}\" >\n  \t\t<Text string=\"who is a current tobacco user\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule6\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('NA') &amp;&amp; msg.drinker.equals('ONGOING')}}\" >\n  \t\t<Text string=\"who is a current alcohol user\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule7\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('BEFORE') &amp;&amp; msg.drinker.equals('NA')}}\" >\n  \t\t<Text string=\"with a history of prior tobacco use\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule8\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('NA') &amp;&amp; msg.drinker.equals('BEFORE')}}\" >\n  \t\t<Text string=\"with a history of prior alcohol use\" />\n    </C>\n    \n    <C id=\"SmokerDrinkerRule9\" groups=\"smokerDrinker\" condition=\"{{msg.smoker.equals('NA') &amp;&amp; msg.drinker.equals('NA')}}\" >\n  \t\t<Text string=\"with no prior history of alcohol and tobacco use\" />\n    </C>\n\n    \n</EnglishLexRuleSet>\n"},{"id":"TreatmentLexRule.xml","value":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<EnglishLexRuleSet xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"../../META-INF/englishLexRuleSchema.xsd\">\n  \n  \t<Sentence id=\"treatment\" classes=\"TreatmentMessage\">\n    \t  <Text string=\"The subject was treated with\"/>\n      \t  <Object>\n          \t<Feature name=\"surface_aggregatable\" value=\"true\"/>\n            <N string=\"{{msg.medicine}}\"/>\n            <NP preposition=\"for\" string=\"{{msg.indication}}\" />\n\t      </Object>\n    </Sentence>\n    \n</EnglishLexRuleSet>"}],"mappings":[{"mappedName":"Age","dataSource":"[[WholeJSON[&#39;demographics&#39;][&#39;age&#39;]]]","type":{"dataType":"NUMERIC"}},{"mappedName":"AgeUnit","dataSource":"[[lower(WholeJSON[&#39;demographics&#39;][&#39;ageUnit&#39;])]]","type":{"dataType":"STRING"}},{"mappedName":"ArmCode","dataSource":"[[WholeJSON[&#39;demographics&#39;][&#39;actualArmCode&#39;]]]","type":{"dataType":"STRING"}},{"mappedName":"ConMedTHmedicine","dataSource":"[[map(WholeJSON[&#39;concomitantMedications&#39;][&#39;therapyHistory&#39;],x-&gt;lower(x.medicationName))]]","type":{"dataType":"STRING"}},{"mappedName":"Gender","dataSource":"[[lower(WholeJSON[&#39;demographics&#39;][&#39;gender&#39;])]]","type":{"dataType":"STRING"}},{"mappedName":"LEX_SmokerDrinker","dataSource":"[[realise((WholeJSON[&#39;smokerDrinker&#39;], &quot;SmokerDrinkerMessage&quot;))]]","type":{"dataType":"STRING"}},{"mappedName":"MedicalHistory","dataSource":"[[map(WholeJSON[&#39;medicalHistory&#39;][&#39;medicalHistory&#39;],x-&gt;lower(x.medicalTerm))]]","type":{"dataType":"STRING"}},{"mappedName":"Race","dataSource":"[[lower(WholeJSON[&#39;demographics&#39;][&#39;race&#39;])]]","type":{"dataType":"STRING"}},{"mappedName":"SeriousAdverseEventDays","dataSource":"[[map(WholeJSON[&#39;adverseEvents&#39;][&#39;seriousEvents&#39;],x-&gt;lower(x.studyDayStart))]]","type":{"dataType":"LIST"}},{"mappedName":"SeriousAdverseEvents","dataSource":"[[map(WholeJSON[&#39;adverseEvents&#39;][&#39;seriousEvents&#39;],x-&gt;lower(x.medicalTerm))]]","type":{"dataType":"LIST"}},{"mappedName":"TrialInvestigatorID","dataSource":"[[WholeJSON[&#39;investigatorId&#39;]]]","type":{"dataType":"JSON"}},{"mappedName":"TrialStudyID","dataSource":"[[WholeJSON[&#39;studyId&#39;]]]","type":{"dataType":"STRING"}},{"mappedName":"TrialSubjectID","dataSource":"[[WholeJSON[&#39;subjectId&#39;]]]","type":{"dataType":"STRING"}},{"mappedName":"WholeJSON","dataSource":"","type":{"dataType":"JSON"}}],"version":12,"collaborators":[],"activeUser":{"userId":"8a251a0c-4574-4401-a2ed-0b3365789698","username":"ehud.reiter@arria.com","firstName":"Ehud","lastName":"Reiter"},"postProcessors":[{"type":"Grammar","id":"PP01","correctAandAn":true,"correctCapitalisation":true}]}